


class FIGURA
{
      public:
             FIGURA();
             int num_lad;
             double area() {}        // Nada hacen, lo que pasa es que es un ejemplo
             double perimetro() {}   // en el que hay métodos con nombres iguales.
}

#include <cmath>

class Triangulo : public Figura  //cualquier triangulo
{ 
      private:
              
              float a,b,c; // lados
              
      public:
             
             Triangulo();
             
             Triangulo(float a,float b,float c)
                  { this->a=a;
                    this->b=b;
                    this->c=c;
                  }
             
             void lados(float a,float b,float c)
                  { this->a=a;
                    this->b=b;
                    this->c=c;
                  }
             
             double area()
                  { float s=(a+b+c)/2;
                    return sqrt((s*(s-a)*(s-b)*(s-c));
                  }
             double perimetro()
                  { return a+b+c;
                  }     
};

class Cuadrado : public Figura
{
      private:
              
              float a; // lados
              
      public:
             
             Cuadrado();
             
             Cuadrado(float a)
                  { this->a=a;
                  }
             
             void lado(float a)
                  { this->a=a;
                  }
             
             double area()
                  { return a*a;
                  }
             double perimetro()
                  { return 4*a;
                  }
};


class Pentagono : public Figura //regular
{ 
      private:
              
              float a; // a = lado
              
      public:
             
             Pentagono();
             
             Pentagono(float a)
                  { this->a=a;
                  }
             
             void lado(float a)
                  { this->a=a;
                  }
             
             double area()
                  { float apot=a*(0.769420884294) // (sen(72°)+sen(36°))/2
                    return 2.5*a*apot;
                  }
             double perimetro()
                  { return 5*a;
                  }
};


class Circulo : public Figura
{ 
      private:
              
              float r; // r = radio
              float pi=3.1415926536;
              
      public:
             
             Circulo();
             
             Circulo(float r)
                  { this->r=r;
                  }
             
             void radio(float r)
                  { this->r=r;
                  }
             
             double area()
                  { return pi*r*r;
                  }
             double perimetro()
                  { return 2*pi*r;
                  }
};





/*

Practica 12


HERENCIA: Existe una clase "padre" y unas clases "hijas"
de donde las "hijas" HEREDAN las propiedades de la clase
"padre", es decir, sus variables, funciones, etc.

class Padre
{
    public:
        string apeido;
        int dinero;
        
        void trabaja()
        {
            dinero*=2;
        }
};

class HijoMalo : public Padre
{
    public:
        HijoMalo()
        {
            apeido="Palomares";
        }
        void trabaja()
        {
            dinero=0;
        }
        void gasta_dinero()
        {
            dinero--;
        }
};

class HijoBueno : public Padre
{
    public:
        HijoBueno()
        {
            apeido="Juarez";
        }
        void da_dinero()
        {
            dinero++;
        }
}

int main()
{
    Padre* p=new HijoBueno();
    Padre* pp=new HijoMalo();
    p->dinero=100;
    pp->dinero=200;
        
    ((HijoBueno*)(p))->da_dinero();
    ((HijoMalo*)(pp))->gasta_dinero();
    
    lista<Padre*> L;        // su clase lista con templates
    
    L.push(p);
    L.push(pp);
    
    Padre* roberto;
    
    roberto=L.dame_un_elemento_random();
    
    if(roberto->apeido=="Palomares")
    {
        ((HijoMalo*)(roberto))->gasta_dinero();
    }else
    {
        ((HijoBueno*)(roberto))->da_dinero();
    }
    
}


int main2()
{
    HijoMalo *roberto=new HijoMalo();
    roberto->dinero=10;
    
    ((Padre*)(roberto))->trabaja();
    
    cout<<roberto->dinero;   
}

Practica 12:
    
    clase Figura
        int numero_de_lados
        double area();
        double perimetro();
    
    class Triangulo : public Figura  //cualquier triangulo
    class Cuadrado : public Figura
    class Pentagono : public Figura //regular
    class Circulo : public Figura
        Hacer lo que quieran pero que funcione y que haga
        las funciones de Figura. Constructores de cada
        figura, por ejemplo para el triangulo le pasas
        3 longitudes que son los lados. Para el circulo
        seria le pasarias el radio, etc.
    
    En el main hacer una lista de Figuras* y ahi meterle
    triangulos, cuadrados, etc. e imprimir las funciones
    de Figura para cada elemento de la lista.
    
    En un triángulo de lados a, b, c, y semiperímetro s=(a+b+c)/2, su área es igual a la raíz cuadrada de s(s-a)(s-b)(s-c)
*/
